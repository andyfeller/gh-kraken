#!/usr/bin/env bash
set -e

__USAGE="
Identify unreleased changes compared to latest release.

USAGE
  gh kraken [flags]
  gh kraken [flags] <repo>
  gh kraken [flags] <owner>/<repo>

FLAGS
  -d, --debug                          Enable debug logging
  -h, --help                           Displays help usage
  -H, --hostname=string                Hostname of the GitHub instance to authenticate with
";

die() {
	printf "\nError: %s\n" "$1"
	echo "$__USAGE"
	exit 1
}

if ! type -p gh > /dev/null; then
	die "'gh' could not be found"
fi

while getopts "dhH:-:" OPT; do
	if [ "$OPT" = "-" ]; then     # long option: reformulate OPT and OPTARG
		OPT="${OPTARG%%=*}"       # extract long option name
		OPTARG="${OPTARG#"$OPT"}" # extract long option argument (may be empty)
		OPTARG="${OPTARG#=}"      # if long option argument, remove assigning `=`
	fi

	case "$OPT" in

		debug | d)
			set -x
			DEBUG=true
			;;

		help | h)
			echo "$__USAGE"
			exit 0
			;;

        hostname | H)
            export GH_HOST="${OPTARG}"
            ;;

		*)
			die "Unknown flag '$OPT'"
			;;
	esac
done

# shift so that $@, $1, etc. refer to the non-option arguments
shift "$((OPTIND-1))"

if [[ "$#" -eq 0 ]]; then
    echo "Determining whether current directory can be used as source repo"
    if ! git rev-parse --git-dir > /dev/null 2>&1; then
        die "Current repo is not git repository"
    fi

    OWNER="{owner}"
    REPO="{repo}"
elif [[ "$#" -gt 1 ]]; then
    die "Too many arguments"
elif [[ "$1" == *"/"* ]]; then
	OWNER=$(echo $1 | cut -d '/' -f 1)
	REPO=$(echo $1 | cut -d '/' -f 2)
else
    OWNER=$(gh api /user --jq '.login')
    REPO="$1"
fi

echo "Using $OWNER/$REPO as source repo"

DEFAULT_BRANCH=$(gh repo view "$OWNER/$REPO" --json defaultBranchRef --jq '.defaultBranchRef.name')
echo "Using $DEFAULT_BRANCH as default branch"

LATEST_RELEASE_TAG=$(gh api "/repos/$OWNER/$REPO/releases/latest" --jq '.tag_name')
echo "Using $LATEST_RELEASE_TAG as latest release tag"

export TEMPLATE="
$OWNER/$REPO $DEFAULT_BRANCH branch is {{ .status }} of $LATEST_RELEASE_TAG by {{ .total_commits }} commits

COMPARE: {{ .html_url }}

{{  tablerow \"SHA\" \"DATE\" \"AUTHOR\" \"MESSAGE\"  }}
{{- range .commits }}
{{- tablerow .sha .commit.author.date .author.login (printf \"%.40s\" .commit.message) }}
{{- end }}
{{- tablerender }}
"

gh api "/repos/$OWNER/$REPO/compare/$LATEST_RELEASE_TAG...$DEFAULT_BRANCH" --template "$TEMPLATE"
